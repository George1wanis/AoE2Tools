using ComponentFactory.Krypton.Toolkit;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using Ionic.Zip;
using System.Threading;
using System.Globalization;
using System.Resources;
namespace WindowsFormsApplication3
{
    public partial class VooblyMods : KryptonForm
    {
        public VooblyMods()
        {
            InitializeComponent();
            
        }
        public int tlslp;
        public bool sniper = true;
        public bool wksniper = true;
        public bool wkdrs = true;
        public static string[] graphicstrs = new string[] { "100", "1006", "1007", "1008", "1009", "101", "1018", "1019", "102", "1020", "1021", "103", "1034", "1035", "1038", "104", "1041", "1044", "1045", "1048", "105", "1051", "1054", "1057", "1058", "1061", "1119", "1122", "1124", "1127", "1136", "1137", "1138", "1139", "1175", "1178", "118", "1181", "1182", "1185", "1188", "119", "1191", "1194", "1195", "1198", "12", "120", "1237", "1241", "1244", "1246", "1250", "1251", "1252", "1253", "1254", "1255", "1256", "1257", "1258", "1259", "1260", "1261", "1262", "1263", "1264", "1265", "1266", "1267", "1268", "1269", "1270", "1271", "1272", "1273", "130", "131", "132", "133", "1353", "1355", "1360", "1361", "1362", "1363", "1372", "1373", "1374", "1375", "1382", "1385", "1388", "1389", "1392", "1398", "1401", "1402", "1405", "1411", "1414", "1415", "1418", "142", "1421", "1424", "1427", "1428", "143", "1431", "1434", "1437", "144", "1440", "1441", "1444", "145", "1450", "1453", "1454", "1457", "1467", "1473", "1476", "1479", "1481", "1484", "1490", "1493", "1495", "1496", "1499", "1506", "1509", "1511", "1512", "1515", "1518", "1519", "1522", "1525", "1527", "1528", "1531", "1535", "1536", "1539", "1542", "1544", "1545", "1548", "1552", "1555", "1558", "1559", "1560", "1563", "1586", "1592", "1595", "1598", "1599", "160", "1602", "1629", "163", "1632", "1635", "1636", "1637", "1640", "1644", "1647", "1650", "1651", "1654", "1659", "166", "1663", "1665", "167", "1681", "1683", "1686", "1689", "1690", "1691", "1693", "170", "171", "173", "1735", "1738", "1741", "1742", "1745", "176", "1761", "1764", "1767", "1768", "1771", "1780", "1784", "179", "180", "1808", "181", "1812", "1828", "183", "1834", "1838", "186", "1869", "1871", "1874", "1875", "1876", "1877", "1878", "1879", "1880", "1883", "1884", "1885", "1886", "189", "1900", "1905", "1906", "1910", "1911", "1912", "1913", "1918", "1919", "192", "1920", "1921", "1926", "1927", "1928", "1929", "193", "1930", "1931", "1932", "1933", "1938", "1939", "1940", "1941", "196", "199", "2", "202", "205", "206", "2079", "2082", "2085", "2086", "2089", "209", "2090", "2091", "2092", "2093", "2098", "2099", "21", "210", "2100", "2101", "2102", "2103", "2104", "2105", "2110", "2111", "2112", "2113", "2116", "2117", "212", "215", "218", "22", "221", "2218", "222", "2223", "2232", "2233", "2234", "2235", "2244", "2245", "2246", "2247", "225", "226", "2261", "2262", "2264", "227", "2275", "2276", "2277", "2278", "2279", "228", "229", "2293", "2295", "2296", "23", "230", "2300", "2304", "2308", "231", "232", "233", "234", "2347", "2348", "2349", "235", "2350", "2355", "2356", "2357", "2358", "2359", "236", "2360", "2361", "2362", "2367", "2368", "2369", "237", "2370", "238", "2383", "2384", "2385", "2386", "2387", "2388", "2389", "239", "2390", "2391", "2392", "2393", "2394", "2395", "2396", "2397", "2398", "2399", "24", "2400", "2401", "2402", "2403", "2404", "2405", "2406", "241", "2419", "2420", "2421", "2422", "2427", "2428", "2429", "2430", "2431", "2432", "2433", "2434", "2439", "2440", "2441", "2442", "2455", "2456", "2457", "2458", "2463", "2464", "2465", "2466", "2467", "2468", "2469", "2470", "2475", "2476", "2477", "2478", "2515", "2517", "2518", "2519", "2520", "2521", "2522", "2523", "2524", "2525", "2526", "2530", "2533", "2534", "2535", "2536", "2537", "2538", "2539", "2540", "2541", "2542", "2543", "2544", "2545", "2546", "2547", "2548", "2549", "2554", "2555", "2556", "2557", "2558", "2559", "2560", "2561", "2568", "2571", "2572", "2573", "2576", "2583", "2586", "2588", "2589", "2592", "2593", "2596", "2606", "2652", "2653", "2654", "2655", "2656", "2657", "2658", "2659", "2660", "2662", "2663", "2664", "2665", "2666", "2667", "2682", "2683", "2698", "2701", "2704", "2705", "2708", "2711", "2714", "2717", "2718", "272", "2721", "273", "2753", "2762", "2765", "2768", "2769", "2772", "2778", "278", "2787", "279", "2790", "2793", "2794", "2797", "280", "2800", "2803", "2806", "2807", "281", "2810", "2813", "2816", "2819", "2820", "2821", "2823", "2826", "2829", "2832", "2833", "2836", "294", "295", "296", "297", "2998", "3001", "3004", "3005", "3008", "3017", "302", "3020", "3023", "3024", "3026", "3027", "3029", "303", "3032", "3035", "3036", "3037", "3039", "304", "305", "3072", "3075", "3078", "3079", "3082", "3085", "3088", "3091", "3092", "3095", "320", "323", "326", "327", "33", "330", "336", "339", "34", "3404", "3405", "3406", "342", "343", "344", "3465", "3466", "3467", "3468", "3469", "3470", "3471", "3472", "3473", "3474", "3475", "3476", "3479", "348", "3482", "3483", "3492", "3493", "3494", "3495", "35", "3504", "3505", "3506", "3507", "3509", "351", "3510", "3511", "3512", "3513", "3514", "3515", "3516", "3517", "3518", "3519", "3534", "3535", "3536", "3537", "3538", "3539", "354", "3540", "3541", "3542", "3543", "3544", "3545", "3546", "3547", "3548", "3549", "3553", "3556", "3559", "3560", "3561", "3563", "3565", "3567", "3568", "3569", "357", "3570", "3573", "3574", "3575", "3576", "3577", "358", "3580", "3583", "3586", "3589", "3592", "3593", "3594", "3595", "3596", "3597", "3598", "3599", "36", "3600", "3601", "3602", "3603", "3604", "3605", "3606", "3607", "3608", "3609", "361", "3610", "3611", "3612", "3613", "3614", "3615", "3616", "3617", "3618", "3619", "362", "3620", "3626", "3629", "363", "3631", "3634", "3635", "364", "3677", "3678", "3679", "3681", "3682", "3683", "3684", "3686", "3688", "3690", "3692", "3694", "3696", "3698", "3702", "3703", "3704", "3705", "3706", "3707", "3708", "3709", "3710", "3711", "3712", "3713", "3714", "3715", "3716", "3717", "3718", "3719", "3720", "3721", "3722", "3723", "3724", "3725", "3726", "3727", "3728", "3729", "3730", "3731", "3732", "3733", "3734", "3735", "3736", "3737", "3738", "3739", "374", "3740", "3741", "3742", "3743", "3744", "3745", "3746", "3747", "3748", "3749", "3750", "3751", "3752", "3753", "3754", "3757", "376", "3760", "3763", "3764", "3767", "377", "3770", "3773", "3776", "3777", "378", "3780", "3783", "3786", "3789", "379", "3790", "3793", "3794", "3795", "3796", "3797", "3798", "3799", "380", "3800", "3801", "3802", "3803", "3804", "3807", "3811", "3812", "3813", "3814", "3815", "3816", "3818", "3819", "3820", "3821", "3824", "3827", "3831", "3832", "3833", "3834", "3835", "3836", "3837", "3838", "3839", "3840", "3841", "3842", "3843", "3846", "3849", "385", "3852", "3853", "3856", "386", "387", "388", "3885", "3888", "389", "3891", "3892", "3895", "390", "391", "392", "3924", "3927", "3930", "3931", "3934", "3963", "3966", "3969", "397", "3970", "3973", "3974", "3975", "3976", "3977", "3978", "3979", "398", "3980", "3982", "3983", "3984", "3985", "3986", "3987", "399", "3991", "3992", "3993", "3994", "3999", "400", "4000", "4001", "4002", "4003", "4004", "4005", "4006", "4011", "4012", "4013", "4014", "4015", "4016", "4017", "4018", "4023", "4024", "4025", "4026", "4027", "4028", "4029", "4030", "4035", "4036", "4037", "4038", "4063", "4064", "4065", "4066", "4067", "4068", "4069", "4070", "4071", "4072", "4073", "4074", "4075", "4076", "4077", "4078", "4079", "4080", "4081", "4082", "4087", "4088", "4089", "409", "4090", "4091", "4092", "4093", "4094", "4099", "410", "4100", "4101", "4102", "4103", "4104", "4105", "4106", "411", "4111", "4112", "4113", "4114", "4115", "4116", "4117", "4118", "412", "4123", "4124", "4125", "4126", "414", "4151", "4152", "4153", "4154", "4155", "4156", "4157", "4158", "4159", "416", "4160", "4161", "4162", "4163", "4164", "4165", "4166", "4168", "4169", "4170", "4171", "4172", "4173", "4174", "4175", "4176", "4177", "4178", "4179", "4180", "4181", "4182", "4183", "4184", "4185", "4186", "4187", "4188", "4189", "4190", "4191", "4192", "4193", "4194", "4195", "4196", "4197", "4198", "4199", "420", "4224", "4225", "4226", "4227", "4228", "4229", "4230", "4231", "4232", "4233", "4234", "4235", "4236", "4237", "4238", "4239", "424", "4240", "4241", "4242", "4243", "4244", "4245", "4246", "4247", "4248", "425", "4253", "4254", "4255", "4256", "426", "4267", "4268", "427", "4273", "4274", "4275", "4276", "4277", "4278", "4279", "428", "4280", "4281", "4282", "4283", "4284", "4285", "429", "4296", "4297", "4298", "4299", "430", "4300", "4301", "4302", "4303", "4304", "4305", "4306", "4307", "4308", "4309", "431", "4310", "4311", "4312", "4313", "4314", "4315", "4316", "4317", "4318", "4319", "432", "4320", "4321", "4322", "4323", "4324", "4325", "4326", "4327", "4328", "4330", "4331", "4336", "4338", "4347", "4348", "4349", "435", "4350", "4351", "4356", "4358", "4359", "4360", "4362", "4363", "4364", "4368", "4369", "4370", "4373", "4376", "4379", "4383", "4386", "4389", "4392", "4393", "4396", "4397", "441", "4410", "4413", "4416", "4417", "4420", "444", "446", "4474", "4476", "4477", "4478", "4479", "4480", "4481", "4482", "4486", "4487", "4488", "4489", "449", "4490", "4491", "4492", "4493", "4494", "4495", "4496", "4497", "4498", "4499", "4500", "4501", "4502", "4503", "4508", "4509", "4510", "4512", "4513", "4514", "4515", "4516", "4517", "4518", "4520", "4521", "4522", "4523", "4534", "4537", "4538", "4539", "4540", "4541", "4572", "4573", "4574", "4575", "4577", "4578", "4580", "4581", "4583", "4584", "4585", "4586", "4587", "4588", "4589", "4590", "4591", "4592", "4594", "4595", "4597", "4598", "4599", "4600", "4601", "4602", "4605", "4606", "4607", "4608", "4609", "4610", "4611", "4612", "4613", "4614", "4615", "4616", "4617", "4618", "4619", "4620", "4621", "4622", "4623", "4624", "4625", "4626", "4627", "4628", "4629", "4630", "4631", "4632", "4633", "4634", "4635", "4636", "4637", "4638", "4639", "4640", "4641", "4642", "4643", "4644", "4645", "4646", "4647", "4648", "4649", "4652", "4653", "4654", "4655", "4656", "4657", "4658", "4659", "4660", "4661", "4662", "4663", "4664", "4665", "4666", "4667", "4668", "4669", "4670", "4671", "4672", "4673", "4674", "4675", "4676", "4677", "4678", "4679", "4680", "4681", "4682", "4683", "4684", "4685", "4699", "4700", "4701", "4702", "4703", "4704", "4705", "4710", "4716", "4719", "4722", "4723", "4726", "4727", "4728", "4729", "4730", "4731", "4812", "4813", "4814", "4818", "4819", "4820", "4823", "4824", "4825", "4826", "4827", "4828", "4829", "4830", "4831", "4832", "4833", "4834", "4835", "4836", "4837", "4838", "4839", "4853", "4854", "4855", "4856", "4857", "4858", "4859", "4860", "4861", "4862", "4865", "4866", "4867", "4868", "4869", "4870", "4871", "4872", "4873", "4874", "4875", "4876", "4878", "4879", "4881", "4882", "4883", "4884", "4885", "4886", "4887", "4889", "4890", "4892", "4893", "4894", "4895", "4897", "4898", "4900", "4901", "4902", "4903", "4905", "4906", "4908", "4909", "4910", "4911", "4912", "4913", "4914", "4915", "4916", "4917", "4918", "4919", "4920", "4921", "4923", "4926", "4929", "4931", "4933", "4934", "4935", "4936", "4937", "4938", "4939", "4944", "4947", "495", "4950", "4953", "4954", "4956", "4957", "4958", "4959", "4960", "4963", "4964", "4965", "4967", "4968", "4970", "4971", "4973", "4974", "4976", "4977", "4978", "4979", "4980", "4981", "4982", "4983", "4984", "4985", "4986", "4987", "4989", "499", "4990", "4992", "4993", "4995", "4996", "4998", "4999", "5", "50", "5000", "5001", "5002", "5003", "5005", "5006", "5008", "5009", "5011", "5012", "5014", "5015", "5016", "5017", "5018", "5019", "5021", "5022", "5024", "5025", "5027", "5028", "5030", "5031", "5032", "5033", "5034", "5035", "5038", "50403", "5041", "5042", "5043", "5044", "5045", "5046", "5047", "5048", "5049", "5050", "5051", "5052", "5055", "5058", "5061", "5062", "5063", "5065", "5067", "5068", "5069", "5070", "5071", "5072", "5073", "5074", "5076", "5077", "5078", "5079", "5080", "5081", "5082", "5083", "5084", "5085", "5086", "5087", "5088", "5089", "5090", "5091", "5092", "5093", "5094", "5095", "5096", "5097", "5098", "5099", "5100", "5101", "5103", "5106", "5107", "5110", "5113", "5116", "5118", "5119", "5121", "5122", "5123", "5124", "5125", "5126", "5127", "5128", "5129", "5130", "5131", "5132", "5134", "5135", "5136", "5137", "5138", "5139", "5140", "5141", "5142", "5143", "5144", "5145", "5146", "5147", "5148", "5149", "5150", "5151", "5152", "5153", "5154", "5155", "5164", "5165", "5166", "5167", "5168", "5175", "5176", "5182", "5204", "5207", "5210", "5211", "5214", "5215", "5217", "5218", "5219", "5220", "5238", "5239", "5240", "5241", "5242", "5284", "5285", "5286", "5287", "5288", "5289", "5290", "5291", "5292", "5293", "5294", "5295", "5296", "5297", "5298", "5299", "53", "5300", "5301", "5302", "5303", "5305", "5306", "5307", "5308", "5309", "5310", "5311", "5312", "57", "575", "576", "577", "578", "581", "584", "587", "588", "591", "594", "597", "600", "601", "604", "607", "61", "610", "613", "614", "617", "634", "637", "64", "640", "641", "644", "653", "657", "663", "666", "669", "67", "670", "673", "676", "679", "68", "682", "683", "686", "689", "692", "695", "696", "699", "702", "705", "708", "71", "710", "713", "716", "719", "722", "723", "724", "726", "73", "730", "732", "733", "734", "735", "736", "737", "738", "739", "740", "741", "742", "744", "745", "746", "747", "748", "749", "75", "750", "751", "752", "753", "768", "771", "774", "775", "776", "779", "782", "785", "788", "789", "792", "795", "798", "8", "801", "802", "805", "817", "818", "819", "820", "849", "852", "855", "856", "859", "867", "870", "873", "874", "877", "889", "891", "892", "893", "894", "895", "898", "9", "90", "900", "901", "902", "903", "904", "905", "906", "907", "91", "912", "913", "914", "915", "916", "917", "918", "919", "92", "920", "921", "922", "923", "924", "925", "926", "927", "928", "929", "93", "930", "931", "932", "933", "936", "939", "942", "943", "944", "946", "955", "956", "957", "958", "971", "974", "977", "98", "980", "981", "984", "987", "99", "990", "993", "994", "997" };
        public static string[] interfacestrs = new string[] { "50001", "50002", "50003", "50004", "50005", "50007", "50010", "50011", "50012", "50013", "50014", "50015", "50016", "50017", "50018", "50019", "50020", "50021", "50051", "50052", "50053", "50054", "50055", "50056", "50057", "50058", "50059", "50060", "50061", "50062", "50063", "50080", "50081", "50083", "50084", "50085", "50086", "50087", "50088", "50089", "50090", "50100", "50101", "50102", "50103", "50104", "50127", "50131", "50137", "50145", "50149", "50150", "50155", "50156", "50157", "50161", "50162", "50163", "50188", "50189", "50190", "50202", "50204", "50212", "50213", "50221", "50222", "50223", "50224", "50225", "50226", "50230", "50231", "50232", "50233", "50235", "50236", "50237", "50238", "50242", "50243", "50244", "50245", "50246", "50250", "50251", "50252", "50253", "50254", "50258", "50259", "50260", "50261", "50262", "50266", "50267", "50268", "50269", "50270", "50300", "50301", "50302", "50303", "50304", "50305", "50306", "50307", "50308", "50309", "50310", "50311", "50312", "50313", "50314", "50315", "50316", "50317", "50318", "50320", "50321", "50322", "50324", "50325", "50327", "50328", "50329", "50330", "50331", "50332", "50333", "50334", "50335", "50336", "50337", "50338", "50339", "50340", "50341", "50342", "50343", "50344", "50345", "50346", "50347", "50348", "50349", "50350", "50351", "50352", "50354", "50355", "50356", "50357", "50358", "50359", "50360", "50361", "50362", "50363", "50364", "50365", "50366", "50367", "50400", "50401", "50402", "50403", "50404", "50406", "50408", "50409", "50411", "50500", "50501", "50502", "50503", "50504", "50505", "50506", "50507", "50508", "50509", "50519", "50520", "50521", "50530", "50531", "50532", "50533", "50534", "50563", "50588", "50589", "50601", "50602", "50603", "50604", "50606", "50609", "50610", "50611", "50612", "50613", "50688", "50705", "50706", "50707", "50708", "50713", "50714", "50715", "50716", "50717", "50718", "50719", "50720", "50721", "50725", "50726", "50727", "50728", "50729", "50730", "50731", "50732", "50745", "50746", "50747", "50748", "50749", "50750", "50751", "50752", "50753", "50754", "50760", "50761", "50762", "50763", "50764", "50765", "50766", "50767", "50768", "50769", "50788", "50789", "50790", "50791", "50792", "50900", "50901", "50902", "50903", "50904", "50905", "50906", "50907", "50908", "50909", "50910", "50911", "51000", "51001", "51002", "51003", "51004", "51005", "51007", "51008", "51009", "51010", "51101", "51102", "51103", "51104", "51105", "51106", "51107", "51108", "51109", "51110", "51111", "51112", "51113", "51114", "51115", "51116", "51117", "51118", "51121", "51122", "51123", "51124", "51125", "51126", "51127", "51128", "51129", "51130", "51131", "51132", "51133", "51134", "51135", "51136", "51137", "51138", "51141", "51142", "51143", "51144", "51145", "51146", "51147", "51148", "51149", "51150", "51151", "51152", "51153", "51154", "51155", "51156", "51157", "51158", "51159", "51160", "52064", "52065", "53001", "53002", "53003", "53004", "53005", "53006", "53007", "53008", "53009", "53010", "53011", "53012", "53014", "53015", "53016", "53017", "53020", "53021", "53022", "53023", "53024", "53101", "53102", "53103", "53104", "53111", "53112", "53113", "53114", "53121", "53122", "53123", "53124", "53131", "53132", "53133", "53134", "53141", "53142", "53143", "53144", "53151", "53152", "53153", "53154", "53161", "53162", "53163", "53164", "53171", "53172", "53173", "53174", "53200", "53201", "53202", "53203", "53204", "53205", "53206", "53207", "53208", "53209", "53210", "53211", "53212", "53213" };
        public static string[] terrainstrs = new string[] { "15000", "15001", "15002", "15004", "15005", "15006", "15007", "15008", "15009", "15010", "15011", "15014", "15015", "15016", "15017", "15018", "15019", "15021", "15022", "15023", "15024", "15026", "15027", "15028", "15029", "15030", "15031" };
        public static string[] soundstrs = new string[] { "5003", "5011", "5012", "5031", "5032", "5043", "5045", "5061", "5097", "5100", "5110", "5123", "5127", "5134", "5164", "5229", "5272", "5276", "5284", "5286", "5287", "5288", "5289", "5297", "5298", "5299", "5300", "5301", "5302", "5303", "5304", "5305", "5306", "5308", "5309", "5310", "5311", "5312", "5313", "5314", "5315", "5316", "5317", "5318", "5319", "5320", "5321", "5322", "5323", "5324", "5326", "5327", "5329", "5330", "5331", "5332", "5333", "5334", "5335", "5336", "5337", "5338", "5339", "5343", "5344", "5345", "5346", "5347", "5348", "5350", "5351", "5352", "5353", "5354", "5357", "5358", "5359", "5360", "5361", "5362", "5363", "5364", "5365", "5366", "5367", "5368", "5369", "5374", "5412", "5413", "5414", "5415", "5416", "5417", "5418", "5419", "5420", "5421", "5422", "5423", "5425", "5426", "5427", "5428", "5447", "5448", "5449", "5450", "5451", "5452", "5453", "5456", "5457", "5459", "5460", "5461", "5462", "5463", "5464", "5465", "5466", "5467", "5468", "5469", "5470", "5471", "5472", "5473", "5474", "5476", "5477", "5478", "5479", "5480", "5483", "5484", "5485", "5486", "5487", "5488", "5489", "5490", "5491", "5492", "5493", "5494", "5495", "5496", "5497", "5498", "5499", "5500", "5501", "5502", "5503", "5504", "5505", "5506", "5507", "5508", "5509", "5510", "5511", "5512", "5513", "5514", "5515", "5516", "5517", "5518", "5520", "5521", "5522", "5526", "5527", "5528", "5529", "5530", "5531", "5532", "5533", "5534", "5535", "5536", "5537", "5538", "5539", "5540", "5541", "5542", "5543", "5544", "5545", "5546", "5547", "5548", "5549", "5550", "5551", "5552", "5553", "5554", "5555", "5556", "5557", "5558", "5559", "5560", "5561", "5562", "5563", "5564", "5565", "5566", "5570", "5571", "5572", "5573", "5599", "5601", "5602", "5603", "5604", "5605", "5606", "5607", "5608", "5609", "5610", "5611", "5613", "5614", "5615", "5616", "5617", "5618", "5619", "5620", "5621", "5622", "5623", "5624", "5625", "5626", "5627", "5628", "5629", "5630", "5631", "5632", "5633", "5634", "5635", "5636", "5637", "5638", "5639", "5640", "5641", "5642", "5643", "5644", "5645", "5646", "5647", "5648", "5649", "5650", "5651", "5652", "5653", "5654", "5655", "5657", "5658", "5659", "5660", "5661", "5662", "5663", "5664", "5665", "5666", "5667", "5668", "5669", "5670", "5671", "5672", "5673", "5674", "5675", "5676", "5677", "5678", "5679", "5680", "5681", "5682", "5683", "5684", "5685", "5686", "5687", "5688", "5689", "5690", "5691", "5692", "5693", "5694", "5695", "5696", "5697", "5698", "5699", "5700", "5701", "5702", "5703", "5704", "5705", "5706", "5707", "5708", "5709", "5710", "5711", "5712", "5713", "5714", "5715", "5716", "5717", "5718", "5719", "5720", "5721", "5722", "5723", "5724", "5725", "5726", "5727", "5728", "5729", "5730", "5731", "5732", "5733", "5734", "5735", "5736", "5737", "5738", "5739", "5740", "5741", "5742", "5743", "5744", "5745", "5746", "5747", "5748", "5749", "5750", "5751", "5752", "5753", "5754", "5755", "5756", "5757", "5758", "5759", "5760", "5761", "5762", "5763", "5764", "5765", "5766", "5767", "5768", "5769", "5770", "5771", "5772", "5773", "5774", "5775", "5776", "5777", "5778", "5779", "5780", "5781", "5782", "5783", "5784", "5785", "5786", "5787", "5788", "5789", "5790", "5791", "5792", "5797", "5799", "5800", "5801", "5802", "5803", "5804", "5805", "5806", "5807", "5808", "5809", "5810", "5811", "5812", "5813", "5814", "5815", "5816", "5817", "5818", "5819", "5820", "5821", "5833", "5834", "5835", "5836", "5841", "5842", "5843", "5844", "5845", "5846", "5847", "5848", "5849", "5850", "5851", "5852", "5853", "5854", "5855", "5856", "5857", "5858", "5859", "5860", "5861", "5862", "5863", "5864", "5865", "5866", "5867", "5868", "5869", "5870", "5871", "5872", "5873", "5874", "5875", "5876", "5877", "5878", "5879", "5880", "5881", "5882", "5883", "5884", "5885", "5886", "5887", "5888", "5889", "5890", "5891", "5892", "5893", "5894", "5895", "5896", "5897", "5898", "5899", "5900", "5901", "5902", "5903", "5904", "5905", "5906", "5907", "5908", "5909", "5910", "5911", "5912", "5913", "5914", "5915", "5916", "5917", "5918", "5919", "5920", "5921", "5922", "5923", "5924", "5925", "5926", "5930", "5940", "5941", "5942", "5944", "5945", "5946", "5947", "5948", "5949", "5950", "5951", "5952", "5953", "5954", "5955", "5956", "5957", "5958", "5959", "5960", "5961", "5962", "5963", "5964", "5965", "5966", "5967", "5968", "5969", "5970", "5971", "5972", "5973", "5974", "5975", "5976", "5977", "5978", "5979", "5980", "5981", "5982", "5983", "5984", "5985", "5986", "5987", "5988", "5989", "5990", "5991", "5992", "5993", "5994", "5995", "5996", "5997", "5998", "5999", "6000", "6001", "6002", "6003", "6004", "6005", "6006", "6007", "6008", "6009", "6010", "6011", "6012", "6013", "6014", "6015", "6016", "6017", "6018", "6019", "6020", "6021", "6022", "6023", "6024", "6025", "6026", "6027", "6028", "6029", "6030", "6031", "6032", "6033", "6034", "6035", "6036", "6037", "6038", "6039", "6040", "6041", "6042", "6043", "6044", "6045", "6046", "6047", "6048", "6049", "6050", "6051", "6052", "6053", "6054", "6055", "6056", "6057", "6058", "6059", "6060", "6061", "6062", "6063", "6064", "6065", "6066", "6067", "6068", "6069", "6070", "6071", "6072", "6073", "6074", "6075", "6076", "6077", "6078", "6079", "6080", "6081", "6082", "6083", "6084", "6085", "6086", "6087", "6088", "6089", "6090", "6091", "6092", "6093", "6094", "6095", "6096", "6097", "6098", "6099", "6100", "6101", "6102", "6103", "6104", "6105", "6106", "6107", "6108", "6109", "6110", "6111", "6112", "6113", "6114", "6115", "6116", "6117", "6118", "6119", "6120", "6121", "6122", "6123", "6124", "6125", "6126", "6127", "6128", "6129", "6130", "6131", "6132", "6133", "6134", "6135", "6136", "6137", "6138", "6139", "6140", "6141", "6142", "6143", "6144", "6145", "6146", "6147", "6148", "6149", "6150", "6151", "6152", "6153", "6154", "6157", "6158", "6159", "6160", "6161", "6162", "6163", "6164", "6165", "6166", "6167", "6168", "6169", "6170", "6171", "6172", "6173", "6174", "6175", "6176", "6177", "6178", "6179", "6180", "6182", "6183", "6184", "6185", "6186", "6187", "6188", "6189", "6190", "6191", "6192", "6193", "6194", "6195", "6196", "6197", "6198", "6199", "6200", "6201", "6202", "6203", "6204", "6205", "6206", "6207", "6208", "6209", "6210", "6211", "6212", "6213", "6214", "6215", "6216", "6217", "6218", "6219", "6220", "6221", "6222", "6223", "6224", "6225", "6226", "6227", "6228", "6229", "6230", "6231", "6232", "6233", "6234", "6235", "6236", "6237", "6238", "6239", "6240", "6241", "6242", "6243", "6244", "6245", "6246", "6247", "6249", "6250", "6251", "6252", "6253", "6254", "6255", "6256", "6257", "6258", "6259", "6260", "6261", "6262", "6263", "6264", "6265", "6266", "6267", "6268", "6269", "6270", "6271", "6272", "6273", "6274", "6275", "6276", "6277", "6278", "6279", "6280", "6281", "6282", "6283", "6284", "6285", "6286", "6287", "6288", "6289", "6290", "6291", "6292", "6293", "6294", "6295", "6296", "6297", "6298", "6299", "6300", "6301", "6302", "6303", "6304", "6305", "6306", "6307", "6308", "6309", "6310", "6311", "6312", "6313", "6314", "6315", "6316", "6317", "6318", "6319", "6320", "6321", "6322", "6323", "6324", "6325", "6326", "6327", "6328", "6329", "6330", "6331", "6332", "6333", "6334", "6335", "6336", "6337", "6338", "6339", "6340", "6341", "6342", "6343", "6344", "6345", "6346", "6347", "6348", "6349", "6350", "6351", "6352", "6353", "6354", "6355", "6356", "6357", "6358", "6359", "6360", "6361", "6362", "6363", "6364", "6365", "6366", "6367", "6368", "6369", "6370", "6371", "6372", "6373", "6374", "6375", "6376", "6377", "6378", "6379", "6383", "6384", "6385", "6386", "6387", "6388", "6389", "6390", "6391", "6392", "6393", "6394", "6395", "6396", "6397", "6398", "6399", "6400", "6401", "6402", "6403", "6404", "6405", "6406", "6407", "6408", "6409", "6410", "6411", "6412", "6413", "6414", "6415", "6416", "6417", "6418", "6419", "6420", "6421", "6422", "6423", "6424", "6425", "6426", "6427", "6428", "6429", "6430", "6431", "6432", "6433", "6434", "6435", "6436", "6437", "6438", "6439", "6440", "6441", "6442", "6443", "6444", "6445", "6450", "6451", "6452", "6453", "6454", "6455", "6456", "6457", "6458", "6459", "6460", "6461", "6462", "6463", "6464", "6465", "6466", "6467", "6468", "6469", "6470", "6471", "6472", "6473", "6474", "6475", "6476", "6477", "6478", "6479", "6480", "6481", "6482", "6483", "6484", "6485", "6486", "6487", "6488", "6489", "6490", "6491", "6492", "6493", "6494", "6495", "6496", "6497", "6498", "6499", "6500", "6501", "6502", "6503", "6504", "6505", "6506", "6507", "6508", "6509", "6510", "6511", "6512", "6513", "6514", "6515", "6516", "6517", "6518", "6519", "6520", "6521", "6522", "6523", "6524", "6525", "6526", "6527", "6528", "6529", "6530", "6531", "6532", "6533", "6534", "6535", "6536", "6537", "6538", "6539", "6540", "6541", "6542", "6543", "6544", "6545", "6546", "6547", "6548", "6549", "6550", "6551", "6552", "6553", "6554", "6555", "6556", "6557", "6558", "6559", "6560", "6561", "6562", "6563", "6564", "6565", "6566", "6567", "6568", "6570", "6571", "6572", "6573", "6574", "6575", "6576", "6577", "6578", "6579", "6580", "6582", "6583", "6584", "6585", "6586", "6587", "6588", "6589", "6590", "6591", "6592", "6593", "6594", "6595", "6596", "6597", "6598", "6599", "6600", "6601", "6602", "6603", "6604", "6605", "6606", "6607", "6608", "6609", "6610", "6611", "6612", "6613", "6614", "6615", "6616", "6617", "6618", "6619", "6620", "6621", "6622", "6623", "6624", "6625", "6626", "6627", "6628", "6629", "6630", "6631", "6632", "6633", "6634", "6635", "6636", "6637", "6638", "6639", "6640", "6641", "6642", "6643", "6644", "6645", "6646", "6647", "6648", "6649", "6650", "6651", "6652", "6653", "6654", "6655", "6656", "6657", "6658", "6659", "6660", "6661", "6662", "6663", "6664", "6665", "6666", "6667", "6668", "6669", "6670", "6671", "6672", "6673", "6674", "6675", "6676", "6677", "6678", "6679", "6680", "6681", "6682", "6683", "6684", "6685", "6686", "6687", "6688", "6689", "6690", "6691", "6692", "6693", "6694", "6695", "6696", "6697", "6698", "6699", "6700", "6701", "6702", "6703", "6704", "6705", "6706", "6707", "6708", "6709", "6710", "6711", "6712", "6713", "6714", "6715", "6716", "6717", "6718", "6719", "6720", "6721", "6722", "6723", "6724", "6725", "6726", "6727", "6728", "6729", "6730", "6731", "6732", "6733", "6734", "6735", "6736", "6737", "6738", "6739", "6740", "6741", "6742", "6743", "6744", "6745", "6746", "6747", "6748", "6749", "6750", "6751", "6752", "6753", "6754", "6755", "6756", "6757" };
        ResourceManager res_man;    // declare Resource manager to access to specific cultureinfo
        CultureInfo cul;            // declare culture info        ResourceManager res_man;    // declare Resource manager to access to specific cultureinfo
        private async void VooblyMods_Load(object sender, EventArgs e)
        {
            res_man = new ResourceManager("WindowsFormsApplication3.langs.Res", typeof(Options).Assembly);
            await Task.Run(() => switchlang());
            

            backgroundWorker1.RunWorkerAsync();

            //GetMods();
            
        }
        public void switchlang()
        {
            using (RegistryKey rk = Registry.CurrentUser.OpenSubKey("Software\\AoE2Tools", true))
            {
                if (Registry.GetValue(@"HKEY_CURRENT_USER\Software\AoE2Tools", "Transl", null) != null)
                {
                    string translatestr = rk.GetValue("Transl").ToString();
                    if (translatestr == "en")
                    {
                        cul = CultureInfo.CreateSpecificCulture("en");
                    }
                    else if (translatestr == "fr")
                    {
                        cul = CultureInfo.CreateSpecificCulture("fr");
                    }
                    else if (translatestr == "es")
                    {
                        cul = CultureInfo.CreateSpecificCulture("es");
                    }
                    else if (translatestr == "zh-cn")
                    {
                        cul = CultureInfo.CreateSpecificCulture("zh-cn");
                    }

                }
                else
                {
                    cul = CultureInfo.CreateSpecificCulture("en");
                }
            }
            BeginInvoke((MethodInvoker)delegate
            {

                VooblyMods.ActiveForm.Text = res_man.GetString("_vooblymodstitle", cul);
                kryptonPage1.Text = res_man.GetString("_visualmods", cul);
                richTextBox1.Text = res_man.GetString("_resetmodsmsg", cul);
                kryptonPage4.Text = res_man.GetString("_resetmods", cul);
                kryptonPage3.Text = res_man.GetString("_gamepatches", cul);
                OfflineInstallVisual.Text = res_man.GetString("_offlineinstall", cul);
                groupBox1.Text = res_man.GetString("_modworkshop", cul);
                kryptonButton2.Text = res_man.GetString("_open", cul);
                kryptonButton3.Text = res_man.GetString("_open", cul);
                kryptonButton5.Text = res_man.GetString("_open", cul);
                kryptonButton1.Text = res_man.GetString("_restoreprev", cul);
                importvisual.Text = res_man.GetString("_import", cul);
                importdata.Text = res_man.GetString("_import", cul);
                importpatches.Text = res_man.GetString("_import", cul);
                exportvisual.Text = res_man.GetString("_export", cul);
                exportdata.Text = res_man.GetString("_export", cul);
                exportpatches.Text = res_man.GetString("_export", cul);
                kryptonButton4.Text = res_man.GetString("_delete", cul);
                delmod.Text = res_man.GetString("_delete", cul);
                delpatch.Text = res_man.GetString("_delete", cul);
                OfflineInstallVisual.Text = res_man.GetString("_offlineinstall", cul);
                selectdata.Text = res_man.GetString("_selectall", cul);
                selectvisual.Text = res_man.GetString("_selectall", cul);
                selectpatches.Text = res_man.GetString("_selectall", cul);
                kryptonPage2.Text = res_man.GetString("_datamods", cul);
                
                groupBox1.Text = res_man.GetString("_modgb", cul);



            });
        }
        private object CreateNewItem(string voobdir)
        {
            KryptonListItem item = new KryptonListItem();
            item.ShortText = voobdir;
            //item.LongText = "(" + _rand.Next(Int32.MaxValue).ToString() + ")";
            item.Image = imageList.Images[0];
            return item;
        }
        public void getpath()
        {
            using (RegistryKey key = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\AoE2Tools", true))
            {
                if (key != null)
                {
                    string aoe2path = key.GetValue("AoE2Path").ToString();

                    //Object o = key.GetValue("Language");
                    if (aoe2path != null)
                    {

                        mskdwk.Text = aoe2path;


                    }
                }
            }

        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            getpath();

            BeginInvoke((MethodInvoker)delegate
            {
                try
                {
                ReloadGamePatches();
                ReloadDataMods();
                ReloadList();
                }
                catch(SystemException)
                {

                }
       
            });

        }

        //public void GetMods()
        //{
        //    string urlAddress = "https://www.voobly.com/games/view/Age-of-Empires-II-The-Conquerors/Game-Mods/gamemods/browse2/13/1";

        //    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(urlAddress);
        //    HttpWebResponse response = (HttpWebResponse)request.GetResponse();

        //    if (response.StatusCode == HttpStatusCode.OK)
        //    {
        //        Stream receiveStream = response.GetResponseStream();
        //        StreamReader readStream = null;

        //        if (response.CharacterSet == null)
        //        {
        //            readStream = new StreamReader(receiveStream);
        //        }
        //        else
        //        {
        //            readStream = new StreamReader(receiveStream, Encoding.GetEncoding(response.CharacterSet));
        //        }

        //        string data = readStream.ReadToEnd();
        //        response.Close();
        //        readStream.Close();


        //        //Regex regex = new Regex("location.href\\s*=\\s*(?:\"(?<1>[^\"]*)\"|(?<1>\\S+))", RegexOptions.IgnoreCase);

        //       //string GetM = Regex.Match(data, "<a href=\"https://voobly.com/gamemods/mod(.*?)>(.*?)</a>", RegexOptions.IgnoreCase).Groups[0].Value;
                             
        //        //string pattern = "<a href=\"https://voobly.com/gamemods/mod(.*?)>(.*?)</a>";
        //        string pattern = "(?s)<tr bgcolor=white valign=top(.*?)</tr>";
        //        Regex rgx = new Regex(pattern);
        //        //File.WriteAllText("mods.txt", data.Replace("\r\n", " "));
        //        //Process.Start("mods.txt");
        //        //string data2 = data.Replace(Environment.NewLine, " ");

        //        int id = 0;
        //        PictureBox[] thum = new PictureBox[118];
        //        Label[] titl = new Label[118];
        //        Panel[] inpanel = new Panel[118];
        //        TextBox[] desc = new TextBox[118];
        //        //pictureBox2.ImageLocation = "https://www.voobly.com/files/view/25372188/6u7v2cuni3gi67eswr2osdrfq0hnxcuu";
        //        foreach (Match match in rgx.Matches(data))
        //        {
        //            id++;
                    
        //            string Getimg = Regex.Match(match.Value, "<img src=\"(.*?)\"", RegexOptions.IgnoreCase).Groups[1].Value;
        //            string GetTitle = Regex.Match(match.Value, "<div class=\"streamgame-title\"><a href=\"https://voobly.com/gamemods/mod(.*?)>(.*?)</a>", RegexOptions.IgnoreCase).Groups[2].Value;
        //            string GetDesc = Regex.Match(match.Value, "<div class=\"streamgame-body\">(.*?)</div><div class=\"streamgame-user\">(.*?)</div>(.*?)</div>", RegexOptions.IgnoreCase).Groups[3].Value;
        //            string GetAuth = Regex.Match(match.Value, "<div class=\"streamgame-body\">(.*?)</div><div class=\"streamgame-user\">(.*?)</div>(.*?)</div>", RegexOptions.IgnoreCase).Groups[2].Value;
        //            string GetLink = Regex.Match(match.Value, "<div class=\"streamgame-title\"><a href=\"(.*?)>(.*?)</a>", RegexOptions.IgnoreCase).Groups[1].Value;
        //            //KryptonMessageBox.Show(GetDesc, "");
        //            thum[id] = new PictureBox();
        //            inpanel[id] = new Panel();
        //            inpanel[id].Name = "flw" + id;
        //            inpanel[id].Location = new Point(3, 0);
        //            inpanel[id].Size = new Size(317, 122);
        //            inpanel[id].Dock = DockStyle.Top;
        //            panel2.Controls.Add(inpanel[id]);
        //            thum[id].ImageLocation = "https://www.voobly.com" + Getimg;
        //            thum[id].Size = new Size(150, 113);
        //            inpanel[id].Controls.Add(thum[id]);

        //            titl[id] = new Label();
        //            titl[id].Text = GetTitle;
        //            titl[id].Name = "titln" + id;
        //            titl[id].BringToFront();
        //            titl[id].Location = new Point(170, 0);
        //            inpanel[id].Controls.Add(titl[id]);


        //            desc[id] = new TextBox()
        //            {
        //                Multiline = true,
        //                ScrollBars = ScrollBars.Vertical
        //            };
        //            //desc[id].Multiline = true;
        //            desc[id].ReadOnly = true;
        //            desc[id].Size = new Size(180, 70);
    
        //            desc[id].Text = GetDesc.Replace("\n"," ");
        //            desc[id].Name = "descn" + id;
        //            desc[id].BringToFront();
        //            desc[id].Location = new Point(170, 25);
        //            inpanel[id].Controls.Add(desc[id]);
        //            if(id == 5)
        //            {
        //                break;
        //            }
        //        }
        //    }
        //}


        private string ReplaceElements(string html)
        {
            string patten = @"<\s*div[^>]*>(.*?)<\s*/div\s*>";
            string wrapper = @"<div class=""Highlighter"">{0}</div>";
            MatchCollection collection = Regex.Matches(html, patten);
            foreach (Match match in collection)
            {
                string value = match.Value;
                int marker = value.IndexOf(">");
                string innterHtml = value.Substring(marker + 1, value.Length - (marker + 7));
                if (Regex.Match(innterHtml, patten).Success)
                    innterHtml = this.ReplaceElements(innterHtml);
                string wrappedText = string.Format(wrapper, innterHtml);
                string modifiedValue = value.Replace(innterHtml, wrappedText);
                html = html.Replace(value, modifiedValue);
            }
            return html;
        }

        private void panel2_Paint(object sender, PaintEventArgs e)
        {

        }

        private void delmod_Click(object sender, EventArgs e)
        {
             if (chkboxvoob.SelectedIndex >= 0 || chkboxvoob.CheckedItems.Count >= 0)
                {
            var confirmResult = KryptonMessageBox.Show("Delete selected mods??",
                                     "Confirm Delete!!",
                                     MessageBoxButtons.YesNo);
            if (confirmResult == DialogResult.Yes)
            {
                
               try
               {
                   foreach (var mod in chkboxvoob.CheckedItems)
                   {

                       Directory.Delete(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod, true);


                   }
                   foreach (var mod in chkboxvoob.SelectedItems)
                   {

                       Directory.Delete(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod, true);


                   }
               }
                catch(SystemException)
               {

               }

               chkboxvoob.Items.Clear();
                ReloadList(); 
            }
              
            }
            else
            {
              KryptonMessageBox.Show("Check At Least a Mod To Delete", "No Mod Is Checked!");
            }
        

                
        }
        public void ReloadList()
        {
            modscount.Text = "0";
            chkboxvoob.Items.Clear();
            //listing directories
            if (!Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods"))
            {
                label1.Text = res_man.GetString("_installedvooblymods", cul);
                modscount.Text = "0";
            }
            else
            {
            System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods");

            System.IO.DirectoryInfo[] dirInfos = di.GetDirectories("*.*");
            label1.Text = res_man.GetString("_installedvooblymods", cul);
            int getcount = 0;
            foreach (System.IO.DirectoryInfo d in dirInfos)
            {
                getcount++;
                int totalcount = getcount;  
                modscount.Text = totalcount.ToString();
                //KryptonMessageBox.Show(d.Name, "");
                chkboxvoob.Items.Add(CreateNewItem(d.Name));
            }
            }
           

        }

        public void ReloadDataMods()
        {
            modscount.Text = "0";
            datamods.Items.Clear();
            if (!Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Data Mods"))
            {
                label1.Text = res_man.GetString("_installeddatamods", cul);
                modscount.Text = "0";
            }
            else
            {
            //listing directories
            System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(mskdwk.Text + @"\Voobly Mods\AOC\Data Mods");

            System.IO.DirectoryInfo[] dirInfos = di.GetDirectories("*.*");
            int getcount = 0;
            label1.Text = res_man.GetString("_installeddatamods", cul);
            foreach (System.IO.DirectoryInfo d in dirInfos)
            {
                getcount++;
                int totalcount = getcount;
                modscount.Text = totalcount.ToString();
                //KryptonMessageBox.Show(d.Name, "");
                datamods.Items.Add(CreateNewItem(d.Name));
            }

            }


        }

        public void ReloadGamePatches()
        {
            modscount.Text = "0";
            gamepatches.Items.Clear();
            if (!Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Patches"))
            {
                label1.Text = res_man.GetString("_installedpatchesmods", cul);
                modscount.Text = "0";
            }
            else
            {
            //listing directories
            System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(mskdwk.Text + @"\Voobly Mods\AOC\Patches");

            System.IO.DirectoryInfo[] dirInfos = di.GetDirectories("*.*");
            label1.Text = res_man.GetString("_installedpatchesmods", cul);
            int getcount = 0;
            foreach (System.IO.DirectoryInfo d in dirInfos)
            {
                getcount++;
                int totalcount = getcount;
                modscount.Text = totalcount.ToString();
                //KryptonMessageBox.Show(d.Name, "");
                gamepatches.Items.Add(CreateNewItem(d.Name));
            }
            }


        }

        private void vooblymodscenter_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("https://www.voobly.com/games/view/Age-of-Empires-II-The-Conquerors/Game-Mods/gamemods/browse2/13/1");
        }

        private void galasmodscenter_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {

            Process.Start("https://www.voobly.com/pages/view/1355/Gallas-Mod-Workshop");
        }

        private void kryptonPage3_Click(object sender, EventArgs e)
        {
            
        }

        private void kryptonPage3_MouseDown(object sender, MouseEventArgs e)
        {
            
        }

        private void kryptonPage3_Load(object sender, EventArgs e)
        {
            
        }

        private void kryptonPage3_Initialized(object sender, EventArgs e)
        {
            
        }

        private void kryptonDockableNavigator1_SelectedPageChanged(object sender, EventArgs e)
        {
            if (kryptonDockableNavigator1.SelectedPage == kryptonPage1)
            {
                ReloadList();
            }
            else if (kryptonDockableNavigator1.SelectedPage == kryptonPage2)
            {
                ReloadDataMods();
            }
            else if (kryptonDockableNavigator1.SelectedPage == kryptonPage3)
            {
                ReloadGamePatches();
            }
            selectdata.Checked = false;
            selectpatches.Checked = false;
            selectvisual.Checked = false;
        }

        private void kryptonButton5_Click(object sender, EventArgs e)
        {
            if (datamods.SelectedIndex >= 0)
            {

                var confirmResult = KryptonMessageBox.Show("Delete selected mods??",
                                        "Confirm Delete!!",
                                        MessageBoxButtons.YesNo);
                if (confirmResult == DialogResult.Yes)
                {
                    // If 'Yes', do something here.
                    try
                    {
                        foreach (var mod in datamods.CheckedItems)
                        {

                            Directory.Delete(mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\" + mod, true);


                        }
                        foreach (var mod in datamods.SelectedItems)
                        {

                            Directory.Delete(mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\" + mod, true);


                        }
                    }
                 catch(SystemException)
                    {

                    }

                    datamods.Items.Clear();
                    ReloadDataMods();
                }
                else
                {
                    // If 'No', do something here.
                }
                
            }
            else
            {
                KryptonMessageBox.Show("Check At Least a Mod To Delete", "No Mod Is Checked!");
            }
          
        }

        private void delpatch_Click(object sender, EventArgs e)
        {
if (gamepatches.SelectedIndex >= 0)
                {
            var confirmResult = KryptonMessageBox.Show("Delete selected mods??",
                        "Confirm Delete!!",
                        MessageBoxButtons.YesNo);
            if (confirmResult == DialogResult.Yes)
            {
                // If 'Yes', do something here.
                try
                {
                    foreach (var mod in gamepatches.CheckedItems)
                    {

                        Directory.Delete(mskdwk.Text + @"\Voobly Mods\AOC\Patches\" + mod, true);

                    }
                    foreach (var mod in gamepatches.SelectedItems)
                    {

                        Directory.Delete(mskdwk.Text + @"\Voobly Mods\AOC\Patches\" + mod, true);

                    } 
                }
                catch(SystemException)
                {

                }
                     
                gamepatches.Items.Clear();
                ReloadGamePatches();
                }

             else
            {
                // If 'No', do something here.
            } 
}
          
else {
    KryptonMessageBox.Show("Check At Least a Mod To Delete", "No Mod Is Checked!");
}
        }

        private void selectvisual_CheckedChanged(object sender, EventArgs e)
        {
            if(selectvisual.Checked == true)
            {
                for (int i = 0; i < chkboxvoob.Items.Count; i++)
{
    chkboxvoob.SetItemChecked(i, true);
}
              
            }
            else if (selectvisual.Checked == false)
            {
                ReloadList();
                for (int i = 0; i < chkboxvoob.Items.Count; i++)
                {
                    chkboxvoob.SetItemChecked(i, false);
                }
            }
        }

        private void selectdata_CheckedChanged(object sender, EventArgs e)
        {
            if (selectdata.Checked == true)
            {
                for (int i = 0; i < datamods.Items.Count; i++)
                {
                    datamods.SetItemChecked(i, true);
                }
          
            }
            else if (selectdata.Checked == false)
            {
                ReloadDataMods();
                for (int i = 0; i < datamods.Items.Count; i++)
                {
                    datamods.SetItemChecked(i, false);
                }
            }
        }

        private void selectpatches_CheckedChanged(object sender, EventArgs e)
        {
            if (selectpatches.Checked == true)
            {
                for (int i = 0; i < gamepatches.Items.Count; i++)
                {
                    gamepatches.SetItemChecked(i, true);
                }
         
            }
            else if (selectpatches.Checked == false)
            {
                ReloadGamePatches();
                for (int i = 0; i < gamepatches.Items.Count; i++)
                {
                    gamepatches.SetItemChecked(i, false);
                }
            }
        }



        public void SaveProgress(object sender, SaveProgressEventArgs e)
        {
            if (e.EventType == ZipProgressEventType.Saving_Started)
            {
                //KryptonMessageBox.Show("Begin Saving: " + e.ArchiveName);
            }
            else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry || e.EventType == ZipProgressEventType.Extracting_BeforeExtractAll)
            {
                //labelCompressionStatus.Text = "Writing: " + e.CurrentEntry.FileName + " (" + (e.EntriesSaved + 1) + "/" + e.EntriesTotal + ")";
                //labelFilename.Text = "Filename:" + e.CurrentEntry.LocalFileName;

                progressBar2.Maximum = e.EntriesTotal;
                progressBar2.Value = e.EntriesSaved + 1;
            }
            else if (e.EventType == ZipProgressEventType.Saving_EntryBytesRead || e.EventType == ZipProgressEventType.Extracting_AfterExtractEntry)
            {
                progressBar1.Value = (int)((e.BytesTransferred * 100) / e.TotalBytesToTransfer);
            }
            else if (e.EventType == ZipProgressEventType.Saving_Completed || e.EventType == ZipProgressEventType.Extracting_AfterExtractAll)
            {
                //KryptonMessageBox.Show("Done: " + e.ArchiveName);
                progressBar1.Value = 0;
                progressBar2.Value = 0;
            }
        }

        private static string FormatByteSize(double bytes)
        {
            string[] Suffix = { "B", "KB", "MB", "TB" };
            int index = 0;
            do { bytes /= 1024; index++; }
            while (bytes >= 1024);
            return String.Format("{0:0.00} {1}", bytes, Suffix[index]);

        }

        private void exportvisual_Click(object sender, EventArgs e)
        {
            if (chkboxvoob.SelectedIndex >= 0 || chkboxvoob.CheckedItems.Count >= 0)
            {
                    // Show the FolderBrowserDialog.
                    SaveFileDialog saveFileDialog1 = new SaveFileDialog();
                    saveFileDialog1.Filter = "Archive Zip|*.Zip";
                    saveFileDialog1.Title = "Save Zip File To";
                    saveFileDialog1.ShowDialog();

        
              


                    // If the file name is not an empty string open it for saving.  
                    if (saveFileDialog1.FileName != "")
                    {
                        //backgroundWorker2.RunWorkerAsync();


                        
                        String ZipFileToCreate = saveFileDialog1.FileName;

                        using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                        {
                            zip.CompressionLevel = Ionic.Zlib.CompressionLevel.Default;
                            zip.SaveProgress += SaveProgress;

                            zip.StatusMessageTextWriter = System.Console.Out;
                            foreach (var mod in chkboxvoob.CheckedItems)
                {
                    String DirectoryToZip = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod.ToString();
                            zip.AddDirectory(DirectoryToZip, mod.ToString()); // recurses subdirectories

                }
                            zip.Save(ZipFileToCreate);
                        }


                        FileInfo sizez = new FileInfo(saveFileDialog1.FileName);
                        KryptonMessageBox.Show("Mods Size: " + FormatByteSize(sizez.Length), "Success");
                    }
                    else
                    {

                    }
                
            }




        }

        private void exportdata_Click(object sender, EventArgs e)
        {
            if (datamods.SelectedIndex >= 0 || datamods.CheckedItems.Count >= 0)
            {
                    // Show the FolderBrowserDialog.
                    SaveFileDialog saveFileDialog1 = new SaveFileDialog();
                    saveFileDialog1.Filter = "Archive Zip|*.Zip";
                    saveFileDialog1.Title = "Save Zip File To";
                    saveFileDialog1.ShowDialog();
                 if (saveFileDialog1.FileName != "")
                    {
                     //begin dialog
               


                    // If the file name is not an empty string open it for saving.  
                   
                        //backgroundWorker2.RunWorkerAsync();


                        
                        String ZipFileToCreate = saveFileDialog1.FileName;

                        using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                        {
                            zip.CompressionLevel = Ionic.Zlib.CompressionLevel.Default;
                            zip.SaveProgress += SaveProgress;

                            zip.StatusMessageTextWriter = System.Console.Out;
                            foreach (var mod in datamods.CheckedItems)
                            {
                                String DirectoryToZip = mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\" + mod.ToString();
                                zip.AddDirectory(DirectoryToZip, mod.ToString()); // recurses subdirectories
                            }
                           
                            zip.Save(ZipFileToCreate);
                        }

                  
                
                FileInfo sizez = new FileInfo(saveFileDialog1.FileName);
                KryptonMessageBox.Show("Mods Size: " + FormatByteSize(sizez.Length), "Success");
                     //end dialog
                    }

                 else
                 {

                 }
            }
            
        }

        private void exportpatches_Click(object sender, EventArgs e)
        {

            if (gamepatches.SelectedIndex >= 0 || gamepatches.CheckedItems.Count >= 0)
            {
                // Show the FolderBrowserDialog.
                SaveFileDialog saveFileDialog1 = new SaveFileDialog();
                saveFileDialog1.Filter = "Archive Zip|*.Zip";
                saveFileDialog1.Title = "Save Zip File To";
                saveFileDialog1.ShowDialog();

                
 

                    // If the file name is not an empty string open it for saving.  
                    if (saveFileDialog1.FileName != "")
                    {
                        //backgroundWorker2.RunWorkerAsync();


                        
                        String ZipFileToCreate = saveFileDialog1.FileName;

                        using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                        {
                            zip.CompressionLevel = Ionic.Zlib.CompressionLevel.Default;
                            zip.SaveProgress += SaveProgress;

                            zip.StatusMessageTextWriter = System.Console.Out;
                            foreach (var mod in gamepatches.CheckedItems)
                {
                            String DirectoryToZip = mskdwk.Text + @"\Voobly Mods\AOC\Patches\" + mod.ToString();
                            zip.AddDirectory(DirectoryToZip, mod.ToString()); // recurses subdirectories

                }
                            zip.Save(ZipFileToCreate);
                        }

                        FileInfo sizez = new FileInfo(saveFileDialog1.FileName);
                        KryptonMessageBox.Show("Mods Successfully Exported!\n" + "Mods Size: " + FormatByteSize(sizez.Length), "Success");
                    }
                    else
                    {

                    }
                
            }


        }

        private void importvisual_Click(object sender, EventArgs e)
        {
                                       // Show the FolderBrowserDialog.
                //SaveFileDialog saveFileDialog1 = new SaveFileDialog();
                OpenFileDialog importfile = new OpenFileDialog();
                importfile.Filter = "Archive Zip|*.Zip";
                importfile.Title = "Select Zip File To Import";
                importfile.ShowDialog();

                // If the file name is not an empty string open it for saving.  
                if (importfile.FileName != "")
                {
                    String DirectoryToZip = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\";
                    //String ZipFileToCreate = saveFileDialog1.FileName;

                    using (Ionic.Zip.ZipFile zip = Ionic.Zip.ZipFile.Read(importfile.FileName))
                    {
                        zip.CompressionLevel = Ionic.Zlib.CompressionLevel.Default;
                        zip.SaveProgress += SaveProgress;
                        zip.ExtractAll(DirectoryToZip,
                    Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
                        zip.StatusMessageTextWriter = System.Console.Out;
                        //zip.AddDirectory(DirectoryToZip); // recurses subdirectories
                        //zip.Save(ZipFileToCreate);
                    }
                    chkboxvoob.Items.Clear();
                    ReloadList();
                    KryptonMessageBox.Show("Mods Successfully Imported!", "Success!");

                }
        }

        private void importdata_Click(object sender, EventArgs e)
        {
            // Show the FolderBrowserDialog.
            //SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            OpenFileDialog importfile = new OpenFileDialog();
            importfile.Filter = "Archive Zip|*.Zip";
            importfile.Title = "Select Zip File To Import";
            importfile.ShowDialog();

            // If the file name is not an empty string open it for saving.  
            if (importfile.FileName != "")
            {
                String DirectoryToZip = mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\";
                //String ZipFileToCreate = saveFileDialog1.FileName;

                using (Ionic.Zip.ZipFile zip = Ionic.Zip.ZipFile.Read(importfile.FileName))
                {
                    zip.CompressionLevel = Ionic.Zlib.CompressionLevel.Default;
                    zip.SaveProgress += SaveProgress;
                    zip.ExtractAll(DirectoryToZip,
                Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
                    zip.StatusMessageTextWriter = System.Console.Out;
                    //zip.AddDirectory(DirectoryToZip); // recurses subdirectories
                    //zip.Save(ZipFileToCreate);
                }
                datamods.Items.Clear();
                ReloadDataMods();
                KryptonMessageBox.Show("Mods Successfully Imported!", "Success!");

            }
        }

        private void importpatches_Click(object sender, EventArgs e)
        {
            // Show the FolderBrowserDialog.
            //SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            OpenFileDialog importfile = new OpenFileDialog();
            importfile.Filter = "Archive Zip|*.zip";
            importfile.Title = "Select Zip File To Import";
            importfile.ShowDialog();

            // If the file name is not an empty string open it for saving.  
            if (importfile.FileName != "")
            {
                String DirectoryToZip = mskdwk.Text + @"\Voobly Mods\AOC\Patches\";
                //String ZipFileToCreate = saveFileDialog1.FileName;

                using (Ionic.Zip.ZipFile zip = Ionic.Zip.ZipFile.Read(importfile.FileName))
                {
                    zip.CompressionLevel = Ionic.Zlib.CompressionLevel.Default;
                    zip.SaveProgress += SaveProgress;
                    zip.ExtractAll(DirectoryToZip,
                Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
                    zip.StatusMessageTextWriter = System.Console.Out;
                    //zip.AddDirectory(DirectoryToZip); // recurses subdirectories
                    //zip.Save(ZipFileToCreate);
                }
                chkboxvoob.Items.Clear();
                ReloadList();
                KryptonMessageBox.Show("Mods Successfully Imported!", "Success!");

            }
        }

        private void kryptonButton1_Click(object sender, EventArgs e)
        {
            try
            {
                foreach (var mod in chkboxvoob.SelectedItems)
                {
                    Process.Start(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod );
                }
                
            }
            catch(SystemException)
            {

            }
        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }
        public static void CopyAll(DirectoryInfo source, DirectoryInfo target)
        {
        
        if (source.FullName.ToLower() == target.FullName.ToLower())
        {
            return;
        }

        // Check if the target directory exists, if not, create it.
        if (Directory.Exists(target.FullName) == false)
        {
            Directory.CreateDirectory(target.FullName);
        }

        // Copy each file into it's new directory.
        foreach (FileInfo fi in source.GetFiles())
        {
            
            fi.CopyTo(Path.Combine(target.ToString(), fi.Name), true);
        }

        // Copy each subdirectory using recursion.
        foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
        {
            DirectoryInfo nextTargetSubDir =
                target.CreateSubdirectory(diSourceSubDir.Name);
            CopyAll(diSourceSubDir, nextTargetSubDir);
        }
    }

        public static string DecodeCheck(string filename)
        {
            FileStream fs = new FileStream(filename, FileMode.Open);
            int hexIn;
            String hex = "";

            for (int i = 0; (hexIn = fs.ReadByte()) != -1 && i < 4; i++)
            {

                hex += string.Format("{0:X2}", hexIn);
            }
            return hex;
        }
         string WKSniperino(string lol)
        {
            if (wksniper == true)
            {
                //cmd filewrite here with wk drs
                wksniper = false;
                return lol;


            }
            else if (wksniper == false)
            {
                //cmd filewrite here without wk drs
                return "";
            }
            return lol;
        }
         // Number of files within zip archive
         public static int ZipFileCount(String zipFileName)
         {
             if (File.Exists(zipFileName))
             {
                 using (System.IO.Compression.ZipArchive archive = System.IO.Compression.ZipFile.Open(zipFileName, System.IO.Compression.ZipArchiveMode.Read))
                 {
                     int count = 0;

                     // We count only named (i.e. that are with files) entries
                     foreach (var entry in archive.Entries)
                         if (!String.IsNullOrEmpty(entry.Name))
                             count += 1;

                     return count;
                 }
             }
             else
             {
                 return 0;
             }
        
         }
        //Click Event
         private void Bulk_Mod_Install(object sender, EventArgs e)
         {
            
         }
        //
         bool IsDigitsOnly(string str)
         {
             foreach (char c in str)
             {
                 if (c < '0' || c > '9')
                     return false;
             }

             return true;
         }
        private async void OfflineInstallVisual_Click(object sender, EventArgs e)
        {
           
            if (chkboxvoob.CheckedItems.Count == 1)
            {

                OfflineInstallVisual.Enabled = false;
                chkboxvoob.Enabled = false;
                delmod.Enabled = false;
                exportvisual.Enabled = false;
                importvisual.Enabled = false;
                kryptonButton2.Enabled = false;
                selectvisual.Enabled = false;
                
                //BEGIN ALL
                if (!Directory.Exists(System.IO.Path.GetTempPath() + @"\AoE2Tools"))
                {
                    Directory.CreateDirectory(System.IO.Path.GetTempPath() + @"\AoE2Tools");
                }
                //Delete Temp
                try
                {
                    if (Directory.Exists(System.IO.Path.GetTempPath() + @"AoE2Tools"))
                    {
                        DirectoryInfo tmpdi = new DirectoryInfo(System.IO.Path.GetTempPath() + @"AoE2Tools");
                        string[] tmpext = new[] { ".slp", ".bina", ".wav" };
                        FileInfo[] tmpFiles = tmpdi.GetFiles().Where(f => tmpext.Contains(f.Extension.ToLower()))
             .ToArray();
                        if (tmpFiles.Count() > 0)
                        {
                            foreach (var file in tmpFiles)
                            {

                                File.Delete(file.FullName);

                            }
                            Thread.Sleep(500);
                            wkdrs = true;
                        }

                    }

                }
                catch (SystemException)
                {
                    wkdrs = false;
                }

                //Conversion
                DirectoryInfo dlli = new DirectoryInfo(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + chkboxvoob.SelectedItem.ToString());
                string[] extz = new[] { ".dll" };
                FileInfo[] dllFiles = dlli.GetFiles().Where(f => extz.Contains(f.Extension.ToLower()))
     .ToArray();
                if (dllFiles.Count() > 0)
                {
                    KryptonMessageBox.Show("This Mod Cannot be installed!", "Error");
                    OfflineInstallVisual.Enabled = true;
                    chkboxvoob.Enabled = true;
                    delmod.Enabled = true;
                    exportvisual.Enabled = true;
                    importvisual.Enabled = true;
                    kryptonButton2.Enabled = true;
                    selectvisual.Enabled = true;
                }
                else if (dllFiles.Count() == 0)
                {

                    if (!File.Exists(mskdwk.Text + @"\Data\Vmods\vmods.zip") || !File.Exists(mskdwk.Text + @"\Data\Vmods\vmodswk.zip") || ZipFileCount(mskdwk.Text + @"\Data\Vmods\vmods.zip") < 4)
                    {
                        ModsBackup bakmods = new ModsBackup();
                        bakmods.ShowDialog();
                    }
                    foreach (var mod in chkboxvoob.SelectedItems)
                    {
                        if (!File.Exists(AppDomain.CurrentDomain.BaseDirectory + @"data\drsbuild.exe"))
                        {
                            KryptonMessageBox.Show("drsbuild.exe was not found! Please Reinstall Latest Version of AoE2Tools.", "Error");
                            Process.Start("https://github.com/gregstein/AoE2Tools/releases");
                        }
                        //Install slps
                        //////////////
                        ////DRS
                        ///////
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs"))
                        {


                            DirectoryInfo di = new DirectoryInfo(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs");
                            string[] extensions = new[] { ".slp", ".wav", ".bina" };
                            FileInfo[] smFiles = di.GetFiles().Where(f => extensions.Contains(f.Extension.ToLower()))
                 .ToArray();
                            int tlslp = smFiles.Count();
                            int inislp = 0;

                            foreach (FileInfo fi in smFiles)
                            {
                                
                                inislp++;
                                //.If Graphics
                                if (graphicstrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)) && fi.Name.Any(c => char.IsDigit(c)))
                                {
                                    if (fi.Name.EndsWith("slp"))
                                    {
                                        //inislp++;
                                        if (Path.GetFileNameWithoutExtension(fi.Name).Length == 3)
                                        {
                                            string threelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, threelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {

                                                    sniper = true;
                                                    wksniper = false;

                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + threelength + " " + threelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                                            process.Start());
                                            await Task.Run(() =>
                                            process.WaitForExit());
                                        }
                                        // Four Length
                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 4)
                                        {
                                            string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra0" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fourlength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fourlength + " " + fourlength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //Five Length

                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 5)
                                        {
                                            string fivelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fivelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fivelength + " " + fivelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                    }


                                }
                                //.If Interface
                                if (interfacestrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)) && fi.Name.Any(c => char.IsDigit(c)))
                                {
                                    if (fi.Name.EndsWith("slp"))
                                    {
                                        //Begin
                                        //inislp++;
                                        if (Path.GetFileNameWithoutExtension(fi.Name).Length == 3)
                                        {
                                            string threelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, threelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + threelength + " " + threelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                                            process.Start());
                                            await Task.Run(() =>
                                            process.WaitForExit());
                                        }
                                        // Four Length
                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 4)
                                        {
                                            string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra0" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fourlength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fourlength + " " + fourlength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //Five Length

                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 5)
                                        {
                                            string fivelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fivelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fivelength + " " + fivelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //End
                                    }
                                    else if (fi.Name.EndsWith("wav") || fi.Name.EndsWith("bina"))
                                    {
                                        //Begin
                                        //inislp++;
                                        if (Path.GetFileNameWithoutExtension(fi.Name).Length == 3)
                                        {
                                            string threelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, threelength, true);

                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                                            process.Start());
                                            await Task.Run(() =>
                                            process.WaitForExit());
                                        }
                                        // Four Length
                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 4)
                                        {
                                            string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra0" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fourlength, true);
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //Five Length

                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 5)
                                        {
                                            string fivelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fivelength, true);
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //End
                                    }
                                }
                                //.If Terrains
                                if (terrainstrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)) && fi.Name.Any(c => char.IsDigit(c)))
                                {
                                    string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                    File.Copy(fi.FullName, fourlength, true);
                                    if (sniper == true)
                                    {
                                        if (DecodeCheck(fi.FullName) == "3713EFBE")
                                        {
                                            sniper = true;
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fourlength + " " + fourlength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\terrain.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                        }
                                        else
                                        {
                                            sniper = false;
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\terrain.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                        }
                                    }
                                    else if (sniper == false)
                                    {
                                        File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\terrain.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                    }


                                    progressBar3.Value = inislp * 100 / tlslp;
                                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                                    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                    startInfo.FileName = "cmd.exe";
                                    startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                    process.StartInfo = startInfo;
                                    await Task.Run(() =>
                    process.Start());

                                    await Task.Run(() =>
                    process.WaitForExit());
                                }
                                //.If Sounds
                                if (soundstrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)) && fi.Name.Any(c => char.IsDigit(c)))
                                {
                                    string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\drs", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "sou" + Path.GetFileNameWithoutExtension(fi.Name));
                                    File.Copy(fi.FullName, fourlength, true);
                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\sounds.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                    progressBar3.Value = inislp * 100 / tlslp;
                                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                                    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                    startInfo.FileName = "cmd.exe";
                                    startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                    process.StartInfo = startInfo;
                                    await Task.Run(() =>
                    process.Start());

                                    await Task.Run(() =>
                    process.WaitForExit());
                                }
                            }
                        }

                        ////Graphics
                        ////////////
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics"))
                        {
                            DirectoryInfo di = new DirectoryInfo(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics");
                            string[] extensions = new[] { ".slp", ".wav", ".bina" };
                            FileInfo[] smFiles = di.GetFiles().Where(f => extensions.Contains(f.Extension.ToLower()))
                 .ToArray();
                            int tlslp = smFiles.Count();
                            int inislp = 0;
                            foreach (FileInfo fi in smFiles)
                            {
                                inislp++;
                                //.If Graphics
                                if (graphicstrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)))
                                {
                                    if (fi.Name.EndsWith("slp"))
                                    {
                                        //inislp++;
                                        if (Path.GetFileNameWithoutExtension(fi.Name).Length == 3)
                                        {
                                            string threelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            string threelengthwk = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, threelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    MessageBox.Show(DecodeCheck(fi.FullName));
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + threelength + " " + threelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                            }

                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                                            process.Start());
                                            await Task.Run(() =>
                                            process.WaitForExit());
                                        }
                                        // Four Length
                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 4)
                                        {
                                            string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra0" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fourlength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fourlength + " " + fourlength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //Five Length

                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 5)
                                        {
                                            string fivelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fivelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fivelength + " " + fivelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\graphics.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                    }



                                    //process.WaitForExit();

                                    //File.Delete(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat");
                                }
                                //.If Interface
                                if (interfacestrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)))
                                {
                                    if (fi.Name.EndsWith("slp") || fi.Name.EndsWith("bina"))
                                    {
                                        //Begin
                                        //inislp++;
                                        if (Path.GetFileNameWithoutExtension(fi.Name).Length == 3)
                                        {
                                            string threelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, threelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + threelength + " " + threelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {

                                            }

                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + threelength + " " + threelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                                            process.Start());
                                            await Task.Run(() =>
                                            process.WaitForExit());
                                        }
                                        // Four Length
                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 4)
                                        {
                                            string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra0" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fourlength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fourlength + " " + fourlength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //Five Length

                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 5)
                                        {
                                            string fivelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fivelength, true);
                                            if (sniper == true)
                                            {
                                                if (DecodeCheck(fi.FullName) == "3713EFBE")
                                                {
                                                    sniper = true;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fivelength + " " + fivelength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                                else
                                                {
                                                    sniper = false;
                                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                                }
                                            }
                                            else if (sniper == false)
                                            {
                                                File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                            }


                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //End
                                    }
                                    else if (fi.Name.EndsWith("wav"))
                                    {
                                        //Begin
                                        //inislp++;
                                        if (Path.GetFileNameWithoutExtension(fi.Name).Length == 3)
                                        {
                                            string threelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra00" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, threelength, true);
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + threelength + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                                            process.Start());
                                            await Task.Run(() =>
                                            process.WaitForExit());
                                        }
                                        // Four Length
                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 4)
                                        {
                                            string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra0" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fourlength, true);
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //Five Length

                                        else if (Path.GetFileNameWithoutExtension(fi.Name).Length == 5)
                                        {
                                            string fivelength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                            File.Copy(fi.FullName, fivelength, true);
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\interfac.drs\" " + "\"" + fivelength + "\"" + Environment.NewLine + "exit");
                                            progressBar3.Value = inislp * 100 / tlslp;
                                            System.Diagnostics.Process process = new System.Diagnostics.Process();
                                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                            startInfo.FileName = "cmd.exe";
                                            startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                            process.StartInfo = startInfo;
                                            await Task.Run(() =>
                            process.Start());

                                            await Task.Run(() =>
                            process.WaitForExit());
                                        }
                                        //End
                                    }
                                }
                                //.If Terrains
                                if (terrainstrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)))
                                {
                                    string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "gra" + Path.GetFileNameWithoutExtension(fi.Name));
                                    File.Copy(fi.FullName, fourlength, true);
                                    if (sniper == true)
                                    {
                                        if (DecodeCheck(fi.FullName) == "3713EFBE")
                                        {
                                            sniper = true;
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + @"data\decoder.exe" + "\" " + fourlength + " " + fourlength + Environment.NewLine + "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\terrain.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                        }
                                        else
                                        {
                                            sniper = false;
                                            File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\terrain.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                        }
                                    }
                                    else if (sniper == false)
                                    {
                                        File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\terrain.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                    }


                                    progressBar3.Value = inislp * 100 / tlslp;
                                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                                    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                    startInfo.FileName = "cmd.exe";
                                    startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                    process.StartInfo = startInfo;
                                    await Task.Run(() =>
                    process.Start());

                                    await Task.Run(() =>
                    process.WaitForExit());
                                }
                                //.If Sounds
                                if (soundstrs.Contains(Path.GetFileNameWithoutExtension(fi.Name)))
                                {
                                    string fourlength = fi.FullName.Replace(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\graphics", System.IO.Path.GetTempPath() + @"AoE2Tools").Replace(Path.GetFileNameWithoutExtension(fi.Name), "sou" + Path.GetFileNameWithoutExtension(fi.Name));
                                    File.Copy(fi.FullName, fourlength, true);
                                    File.WriteAllText(System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Data\\sounds.drs\" " + "\"" + fourlength.Replace(@"\\", @"\") + "\"" + Environment.NewLine + "exit");
                                    progressBar3.Value = inislp * 100 / tlslp;
                                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                                    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                                    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                                    startInfo.FileName = "cmd.exe";
                                    startInfo.Arguments = "/c" + System.IO.Path.GetTempPath() + @"\" + Path.GetFileNameWithoutExtension(fi.Name) + ".bat";
                                    process.StartInfo = startInfo;
                                    await Task.Run(() =>
                    process.Start());

                                    await Task.Run(() =>
                    process.WaitForExit());
                                }


                            }
                        }

                        ////Voobly Mods Folder
                        //////////////////////
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Voobly Mods"))
                        {
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.preload;
                            string sourceDirectory = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Voobly Mods";
                            string targetDirectory = mskdwk.Text + @"\Voobly Mods";

                            DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
                            DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);
                            await Task.Run(() => CopyAll(diSource, diTarget));
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.check;
                            //CopyAll(diSource, diTarget);

                        }
                        ////AoC Folders
                        //////////////////////
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Scenario"))
                        {
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.preload;
                            string sourceDirectory = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Scenario";
                            string targetDirectory = mskdwk.Text + @"\Scenario";
                            string targetDirectory2 = mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\WololoKingdoms\Scenario";
                            DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
                            DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);
                            DirectoryInfo diTarget2 = new DirectoryInfo(targetDirectory2);

                            await Task.Run(() => CopyAll(diSource, diTarget));
                            await Task.Run(() => CopyAll(diSource, diTarget2));
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.check;

                        }
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Ai"))
                        {
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.preload;
                            string sourceDirectory = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Ai";
                            string targetDirectory = mskdwk.Text + @"\Ai";

                            DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
                            DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);


                            await Task.Run(() => CopyAll(diSource, diTarget));

                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.check;
                        }

                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Random"))
                        {
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.preload;
                            string sourceDirectory = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Random";
                            string targetDirectory = mskdwk.Text + @"\Random";

                            DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
                            DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);


                            await Task.Run(() => CopyAll(diSource, diTarget));
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.check;

                        }
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Sound"))
                        {
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.preload;
                            string sourceDirectory = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Sound";
                            string targetDirectory = mskdwk.Text + @"\Sound";

                            DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
                            DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);


                            await Task.Run(() => CopyAll(diSource, diTarget));
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.check;

                        }
                        if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Taunt"))
                        {
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.preload;
                            string sourceDirectory = mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + mod + @"\Taunt";
                            string targetDirectory = mskdwk.Text + @"\Taunt";

                            DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
                            DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);


                            await Task.Run(() => CopyAll(diSource, diTarget));
                            pictureBox4.Image = WindowsFormsApplication3.Properties.Resources.check;

                        }
                    }
                    //End
                    //Apply to WK
                    if (wkdrs == false)
                    {
                        MessageBox.Show("Unable to install to WK");
                    }
                    if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + chkboxvoob.SelectedItem.ToString() + @"\drs") && wkdrs == true)
                    {
                        File.WriteAllText(System.IO.Path.GetTempPath() + chkboxvoob.SelectedItem.ToString() + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "Data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Voobly Mods\\AOC\\Data Mods\\WololoKingdoms\\Data\\gamedata_x1_p1.drs\" " + "\"" + System.IO.Path.GetTempPath() + "AoE2Tools\\*.*" + "\"" + Environment.NewLine + "exit");

                        progressBar3.Value = progressBar3.Value - 1;
                        Process proc = new Process();
                        proc.StartInfo.FileName = Path.Combine(System.IO.Path.GetTempPath() + @"\" + chkboxvoob.SelectedItem.ToString() + ".bat");
                        proc.StartInfo.Arguments = "";
                        proc.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                        proc.StartInfo.CreateNoWindow = true;
                        //proc.Start();
                        //var process = Process.Start(System.IO.Path.GetTempPath() + @"\" + chkboxvoob.SelectedItem.ToString() + ".bat");
                        //process.StartInfo.CreateNoWindow = false;
                        //process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                        await Task.Run(() =>

                       proc.Start());
                        await Task.Run(() =>

                            proc.WaitForExit());

                    }
                    else if (Directory.Exists(mskdwk.Text + @"\Voobly Mods\AOC\Local Mods\" + chkboxvoob.SelectedItem.ToString() + @"\graphics") && wkdrs == true)
                    {
                        File.WriteAllText(System.IO.Path.GetTempPath() + chkboxvoob.SelectedItem.ToString() + ".bat", "\"" + AppDomain.CurrentDomain.BaseDirectory + "Data\\drsbuild.exe\" " + "/a \"" + mskdwk.Text + "\\Voobly Mods\\AOC\\Data Mods\\WololoKingdoms\\Data\\gamedata_x1_p1.drs\" " + "\"" + System.IO.Path.GetTempPath() + "AoE2Tools\\*.*" + "\" &" + "exit");
                        progressBar3.Value = progressBar3.Value - 1;
                        Process proc = new Process();
                        proc.StartInfo.FileName = Path.Combine(System.IO.Path.GetTempPath() + @"\" + chkboxvoob.SelectedItem.ToString() + ".bat");
                        proc.StartInfo.Arguments = "";
                        proc.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                        proc.StartInfo.CreateNoWindow = true;
                        //proc.Start();
                        //var process = Process.Start(System.IO.Path.GetTempPath() + @"\" + chkboxvoob.SelectedItem.ToString() + ".bat");
                        //process.StartInfo.CreateNoWindow = false;
                        //process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                        await Task.Run(() =>

                       proc.Start());
                        await Task.Run(() =>

                            proc.WaitForExit());
                    }
                    //Delete Temp
                    try
                    {
                        if (Directory.Exists(System.IO.Path.GetTempPath() + @"AoE2Tools"))
                        {
                            DirectoryInfo tmpdi = new DirectoryInfo(System.IO.Path.GetTempPath() + @"AoE2Tools");
                            string[] tmpext = new[] { ".slp", ".bina", ".wav" };
                            FileInfo[] tmpFiles = tmpdi.GetFiles().Where(f => tmpext.Contains(f.Extension.ToLower()))
                 .ToArray();
                            if (tmpFiles.Count() > 0)
                            {
                                foreach (var file in tmpFiles)
                                {

                                    File.Delete(file.FullName);

                                }
                                Thread.Sleep(500);
                                wkdrs = true;
                            }

                        }

                    }
                    catch (SystemException)
                    {
                        wkdrs = false;
                    }
                    progressBar3.Value = progressBar3.Value + 1;
                    if (progressBar3.Value != progressBar3.Maximum)
                    {
                        progressBar3.Value = progressBar3.Maximum;
                    }
                    KryptonMessageBox.Show(chkboxvoob.SelectedItem.ToString() + " Offline Install Success!", "Installation Completed!");
                    progressBar3.Value = 0;
                    chkboxvoob.SelectedItem = Enabled.Equals(false);
                    OfflineInstallVisual.Enabled = true;
                    chkboxvoob.Enabled = true;
                    delmod.Enabled = true;
                    exportvisual.Enabled = true;
                    importvisual.Enabled = true;
                    kryptonButton2.Enabled = true;
                    selectvisual.Enabled = true;
                    //END ALL
                }
            }
            else if(chkboxvoob.CheckedItems.Count >= 1)
            {
                KryptonMessageBox.Show("Please Check Only 1 Mod To Install!", "Alert");
            }
            }

        private void backgroundWorker2_DoWork(object sender, DoWorkEventArgs e)
        {
    
            
        }

        private void backgroundWorker2_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            
        }

        private void backgroundWorker2_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressBar3.Value = e.ProgressPercentage;
        }

        private async void kryptonButton1_Click_1(object sender, EventArgs e)
        {
            try
            {
                kryptonButton1.Enabled = false;
                pictureBox3.Enabled = true;
                pictureBox3.Visible = true;
                pictureBox3.Image = WindowsFormsApplication3.Properties.Resources.preload;
                if (File.Exists(mskdwk.Text + @"\Data\Vmods\vmods.zip"))
                {
                    await Task.Run(() => Unzip(mskdwk.Text + @"\Data\Vmods\vmods.zip", mskdwk.Text + @"\Data"));
                    if (File.Exists(mskdwk.Text + @"\Data\Vmods\vmodswk.zip"))
                    {
                        await Task.Run(() => Unzip(mskdwk.Text + @"\Data\Vmods\vmodswk.zip", mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\WololoKingdoms\Data"));
                    }
                    pictureBox3.Image = WindowsFormsApplication3.Properties.Resources.check;
                    kryptonButton1.Enabled = true;
                }
                else
                {
                    KryptonMessageBox.Show("No Restore Point Yet! You need to \"offline install\" any visual mod to use this feature.");
                    kryptonButton1.Enabled = true;
                    pictureBox3.Enabled = false;
                    pictureBox3.Visible = false;
                }
            }
                catch(UnauthorizedAccessException)
            {
                try
                {
                    MessageBox.Show("AoE2Tools must run as Administrator!");
                    var exeName = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
                    ProcessStartInfo startInfo = new ProcessStartInfo(exeName);
                    startInfo.Verb = "runas";
                    System.Diagnostics.Process.Start(startInfo);
                    Process.GetCurrentProcess().Kill();
                }
                catch (SystemException)
                {
                    MessageBox.Show("AoE2Tools will close! Until you run it as administrator");
                    Process.GetCurrentProcess().Kill();
                }
            }
            catch(SystemException)
            {

            }

            
        }
        public void Unzip(string sourceArchive, string destination)
        {
            string zPath = AppDomain.CurrentDomain.BaseDirectory + "ver.exe";
            try
            {
                ProcessStartInfo pro = new ProcessStartInfo();
                pro.WindowStyle = ProcessWindowStyle.Hidden;
                pro.FileName = zPath;
                pro.Arguments = string.Format("x \"{0}\" -y -o\"{1}\"", sourceArchive, destination);
                Process x = Process.Start(pro);
                x.WaitForExit();
            }
            catch (System.Exception Ex)
            {
                throw Ex;

            }
        }

        private void kryptonButton3_Click(object sender, EventArgs e)
        {
            try
            {
                foreach (var mod in datamods.SelectedItems)
                {
                    Process.Start(mskdwk.Text + @"\Voobly Mods\AOC\Data Mods\" + mod);
                }

            }
            catch (SystemException)
            {

            }
        }

        private void kryptonButton5_Click_1(object sender, EventArgs e)
        {
            
            try
            {
                foreach (var mod in gamepatches.SelectedItems)
                {
                    Process.Start(mskdwk.Text + @"\Voobly Mods\AOC\Patches\" + mod);
                }

            }
            catch (SystemException)
            {

            }
        }

        private void chkboxvoob_SelectedIndexChanged(object sender, EventArgs e)
        {
            OfflineInstallVisual.Enabled = true;
        }
        }

    }

